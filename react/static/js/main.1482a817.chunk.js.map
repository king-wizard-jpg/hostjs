{"version":3,"sources":["types/EPageStatus.ts","context/AppContext.ts","components/Header.tsx","components/Loader.tsx","services/base-service.ts","configuration.ts","containers/apis/ApisCreate.tsx","containers/apis/ApisEdit.tsx","containers/apis/ApisIndex.tsx","containers/endpoints/CreateEndpoint.tsx","containers/home/HomeIndex.tsx","services/account-service.ts","containers/identity/Login.tsx","containers/identity/Register.tsx","containers/owners/OwnersCreate.tsx","containers/owners/OwnersEdit.tsx","containers/owners/OwnersIndex.tsx","containers/Page404.tsx","App.tsx","index.tsx"],"names":["EPageStatus","initialAppState","jwt","fullName","setAuthInfo","loading","AppContext","React","createContext","AppContextProvider","Provider","Consumer","Header","changeTheme","theme","html","document","querySelector","classList","contains","remove","updateButtonValue","add","isDarkTheme","useState","buttonValue","appState","useContext","className","to","title","onClick","Loader","props","pageStatus","Loading","Error","statusCode","BaseService","headers","Authorization","_axios","Axios","create","baseURL","getAll","apiEndpoint","a","get","getAxiosConfiguration","response","ok","status","data","axError","console","log","messages","message","id","post","entity","JSON","stringify","put","delete","initialFormValues","name","baseUrl","description","ownerId","ApiCreateFormView","htmlFor","type","value","values","onChange","e","handleChange","target","owners","map","owner","postApiData","preventDefault","ApisCreate","formValues","setFormValues","Ok","setPageStatus","setOwners","loadData","result","useEffect","ApiEditFormView","putApiData","ApisEdit","useParams","apiResult","ownerResult","ApisIndex","apis","setApis","appContext","initialSelectedApi","selectedApi","setSelectedApi","removeApi","apiId","splice","findIndex","removeEndpoint","endpointId","forEach","api","apiEndpoints","endpoint","RowDisplay","undefined","length","href","rel","disabled","defaultValue","endpointUrl","apiBaseInformationId","CreateEndpointFormView","postEndpointUrl","CreateEndpoint","HomeIndex","AccountService","axios","login","loginData","register","registerData","email","password","FormView","autoComplete","toggleAuthStatus","LoginForm","jwtResponse","token","RegisterForm","OwnerCreateFormVIew","postOwnerForm","OwnersCreate","putOwnerData","OwnersEdit","OwnersIndex","initialSelectedOwner","selectedOwner","setSelectedOwner","removeOwner","o","CardDisplay","Page404","App","setAppState","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1482a817.chunk.js","sourcesContent":["export enum EPageStatus {\r\n    Loading = \"Loading...\",\r\n    Error = \"Error...\",\r\n    Ok = \"Ok\",\r\n}\r\n","import React from 'react';\r\n\r\nexport interface IAppState {\r\n    jwt: string | null;\r\n    fullName: string;\r\n    setAuthInfo: (jwt: string | null, fullName: string) => void,\r\n    loading: boolean;\r\n};\r\n\r\nexport const initialAppState: IAppState = {\r\n    jwt: null,\r\n    fullName: \"\",\r\n    setAuthInfo: (): void => { },\r\n    loading: false,\r\n};\r\n\r\nexport const AppContext = React.createContext<IAppState>(initialAppState);\r\nexport const AppContextProvider = AppContext.Provider;\r\nexport const AppContextConsumer = AppContext.Consumer;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nconst Header = () => {\r\n\r\n    //#region Theme\r\n    const changeTheme = (theme: 'dark' | '') => {\r\n        let html = document.querySelector('html');\r\n        if (theme === 'dark' && !html?.classList.contains('dark')) {\r\n            updateButtonValue('☀');\r\n            html?.classList.add(theme);\r\n        } else {\r\n            html?.classList.remove('dark');\r\n            updateButtonValue('🌑')\r\n        }\r\n    }\r\n\r\n    const isDarkTheme = (): boolean => {\r\n        let html = document.querySelector('html');\r\n        if (html?.classList.contains('dark')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    const [buttonValue, updateButtonValue] = useState(isDarkTheme() ? '☀' : '🌑');\r\n\r\n    //#endregion\r\n\r\n    //#region AppState\r\n\r\n    let appState = useContext(AppContext)\r\n\r\n    const logOut = (): void => {\r\n        appState.setAuthInfo(null, '');\r\n    }\r\n\r\n    //#endregion\r\n\r\n    return (\r\n        <header className=\"flex bg-pink-200 dark:bg-blue-900 p-2 justify-between\">\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    <li className=\"flex-auto\">\r\n                        <Link className=\"block px-2 dark:text-white \" to=\"/\" title=\"Home\">\r\n                            <span className=\"text-2xl animal\"></span>\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"flex-auto\">\r\n                        <NavLink className=\"block p-2 dark:text-white dark:hover:bg-pink-100 dark:hover:text-black\" to=\"/apis\">\r\n                            Apis\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className=\"flex-auto\">\r\n                        <NavLink className=\"block p-2 dark:text-white dark:hover:bg-pink-100 dark:hover:text-black\" to=\"/owners\">\r\n                            Owners\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <ul className=\"flex flex-wrap flex-row list-none\">\r\n                    {appState.jwt === null\r\n                        ?\r\n                        <>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 dark:text-white dark:hover:bg-pink-100 dark:hover:text-black\" to=\"/identity/login\">\r\n                                    Login\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className=\"flex-auto\">\r\n                                <NavLink className=\"block p-2 dark:text-white dark:hover:bg-pink-100 dark:hover:text-black\" to=\"/identity/register\">\r\n                                    Register\r\n                                </NavLink>\r\n                            </li>\r\n                        </>\r\n                        :\r\n                        <li>\r\n                            <button\r\n                                onClick={() => logOut()}\r\n                                className=\"block p-2 dark:text-white dark:hover:bg-pink-100 dark:hover:text-black\">\r\n                                Log Out\r\n                            </button>\r\n                        </li>\r\n                    }\r\n                </ul>\r\n                {\r\n                    isDarkTheme()\r\n                        ?\r\n                        <button className=\"text-white\" onClick={() => changeTheme('')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                        :\r\n                        <button onClick={() => changeTheme('dark')}>\r\n                            {buttonValue}\r\n                        </button>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;\r\n","import { EPageStatus } from \"../types/EPageStatus\";\r\nimport { IPageStatus } from \"../types/IPageStatus\";\r\n\r\nconst Loader = (props: { pageStatus: IPageStatus }) => {\r\n    switch (props.pageStatus.pageStatus) {\r\n        case EPageStatus.Loading:\r\n            return (\r\n                <div className=\"absolute top-0 right-0 bottom-0 left-0 w-full h-full bg-gray-600 grid opacity-60 justify-center content-center \">\r\n                    <div className=\"lds-ring\"><div className=\"dark:boder-white\"></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            )\r\n        case EPageStatus.Error:\r\n            return <div>Error... {props.pageStatus.statusCode}</div>\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n","import { ApiBaseUrl } from './../configuration';\r\nimport Axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { IFetchResponse } from '../types/IFetchResponse';\r\n\r\nexport abstract class BaseService {\r\n    protected static _axios = Axios.create({\r\n        baseURL: ApiBaseUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\r\n        if (!jwt) return undefined;\r\n        const config: AxiosRequestConfig = {\r\n            headers: {\r\n                Authorization: 'Bearer ' + jwt\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    static getAll = async <TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await BaseService._axios\r\n                .get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity[]\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            console.log(error);\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n    static get = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.get<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            console.log(error);\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n    static post = async <TEntity>(apiEndpoint: string, entity: TEntity, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.post<TEntity>(apiEndpoint, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data as TEntity\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            console.log(axError);\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n    static put = async <TEntity>(apiEndpoint: string, entity: TEntity, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.put<TEntity>(`${apiEndpoint}/${id}`, JSON.stringify(entity), BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            console.log(error);\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n    static delete = async <TEntity>(apiEndpoint: string, id: string, jwt: string): Promise<IFetchResponse<TEntity>> => {\r\n        try {\r\n            let response = await BaseService._axios.delete<TEntity>(`${apiEndpoint}/${id}`, BaseService.getAxiosConfiguration(jwt));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            console.log(error);\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const ApiBaseUrl = \"https://publicapis.azurewebsites.net/api/\";\r\nexport const LoginUrl = \"https://publicapis.azurewebsites.net/api/v1/Account/\";\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IOwner } from \"../../dtos/IOwner\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nexport interface IApiCreateValues {\r\n    name: string;\r\n    baseUrl: string;\r\n    description?: string;\r\n    ownerId: string;\r\n}\r\n\r\nconst initialFormValues: IApiCreateValues = {\r\n    name: \"\",\r\n    baseUrl: \"\",\r\n    description: \"\",\r\n    ownerId: \"\",\r\n}\r\n\r\nexport interface IApiCreateProps {\r\n    values: IApiCreateValues;\r\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\r\n    postApiData: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n    owners: IOwner[];\r\n}\r\n\r\n\r\n\r\nconst ApisCreate = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Ok, statusCode: 0 });\r\n    const [owners, setOwners] = useState([] as IOwner[]);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<IOwner>('/v1/Owners');\r\n        if (result.ok && result.data) {\r\n            setOwners(result.data);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n\r\n    const postApiData = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n\r\n        let result = await BaseService.post<IApiCreateValues>(\"/v1/ApiBaseInformation\", formValues, appState.jwt ?? \"\");\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode })\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        switch (target.id) {\r\n            case \"name\":\r\n                setFormValues({ ...formValues, name: target.value })\r\n                return;\r\n            case \"baseUrl\":\r\n                setFormValues({ ...formValues, baseUrl: target.value })\r\n                return;\r\n            case \"description\":\r\n                setFormValues({ ...formValues, description: target.value })\r\n                return;\r\n            case \"ownerId\":\r\n                setFormValues({ ...formValues, ownerId: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt !== null && pageStatus.statusCode !== 201\r\n                ?\r\n                <ApiCreateFormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    postApiData={postApiData}\r\n                    pageStatus={pageStatus}\r\n                    owners={owners} />\r\n                :\r\n                <Redirect to=\"/apis\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst ApiCreateFormView = (props: IApiCreateProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <input id=\"name\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.name}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"baseUrl\">Base URL</label>\r\n                        <input id=\"baseUrl\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.baseUrl}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"ownerId\">Owner</label>\r\n                        <select id=\"ownerId\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.ownerId}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                            <option value=\"\"></option>\r\n                            {\r\n                                props.owners.map(owner => {\r\n                                    return (\r\n                                        <option\r\n                                            value={owner.id}\r\n                                            key={owner.id}>\r\n                                            {owner.name}\r\n                                        </option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"description\">Description</label>\r\n                        <textarea id=\"description\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.description}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </textarea>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.postApiData(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">Add API Base</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ApisCreate;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IApi } from \"../../dtos/IApi\";\r\nimport { IOwner } from \"../../dtos/IOwner\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\nexport interface IApiCreateValues {\r\n    name: string;\r\n    baseUrl: string;\r\n    description?: string;\r\n    ownerId: string;\r\n}\r\n\r\nconst initialFormValues: IApiCreateValues = {\r\n    name: \"\",\r\n    baseUrl: \"\",\r\n    description: \"\",\r\n    ownerId: \"\",\r\n}\r\n\r\nexport interface IApiCreateProps {\r\n    values: IApiCreateValues;\r\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\r\n    putApiData: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n    owners: IOwner[];\r\n}\r\n\r\nconst ApisEdit = () => {\r\n    let { id } = useParams() as IRouteId;\r\n\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [owners, setOwners] = useState([] as IOwner[]);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        const apiResult = await BaseService.get<IApi>('/v1/ApiBaseInformation', id, appState.jwt ?? \"\");\r\n        if (apiResult.ok && apiResult.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n            setFormValues(apiResult.data)\r\n\r\n            const ownerResult = await BaseService.getAll<IOwner>('/v1/Owners');\r\n\r\n            if (ownerResult.ok && ownerResult.data) {\r\n                setOwners(ownerResult.data);\r\n            }\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: apiResult.statusCode })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const putApiData = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n\r\n        let result = await BaseService.put<IApiCreateValues>(\"/v1/ApiBaseInformation\", formValues, id, appState.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode })\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\r\n        console.log(target.value);\r\n\r\n        switch (target.id) {\r\n            case \"name\":\r\n                setFormValues({ ...formValues, name: target.value })\r\n                return;\r\n            case \"baseUrl\":\r\n                setFormValues({ ...formValues, baseUrl: target.value })\r\n                return;\r\n            case \"description\":\r\n                setFormValues({ ...formValues, description: target.value })\r\n                return;\r\n            case \"ownerId\":\r\n                setFormValues({ ...formValues, ownerId: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt !== null && pageStatus.statusCode !== 204\r\n                ?\r\n                <ApiEditFormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    putApiData={putApiData}\r\n                    pageStatus={pageStatus}\r\n                    owners={owners} />\r\n                :\r\n                <Redirect to=\"/apis\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst ApiEditFormView = (props: IApiCreateProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-wrap sm:flex-nowrap\">\r\n                <div className=\"flex-row pt-2 px-4 w-full sm:w-auto border-black bg-gradient-to-b from-pink-200 to-white dark:from-blue-900 dark:to-gray-800\">\r\n                    <Link\r\n                        className=\"block p-2 bg-green-600 whitespace-nowrap w-full sm:w-auto text-center\"\r\n                        to=\"/apis/create\">\r\n                        Add new Base\r\n                    </Link>\r\n                </div>\r\n                <div className=\"flex-row w-full\">\r\n                    <div className=\"flex flex-wrap justify-center p-2\">\r\n                        <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                            <div className=\"grid grid-col mb-2\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <input id=\"name\"\r\n                                    type=\"text\"\r\n                                    className=\"p-1 dark:text-black bg-gray-400\"\r\n                                    value={props.values.name}\r\n                                    onChange={(e) => props.handleChange(e.target)}\r\n                                >\r\n                                </input>\r\n                            </div>\r\n                            <div className=\"grid grid-col mb-2\">\r\n                                <label htmlFor=\"baseUrl\">Base URL</label>\r\n                                <input id=\"baseUrl\"\r\n                                    type=\"text\"\r\n                                    className=\"p-1 dark:text-black bg-gray-400\"\r\n                                    value={props.values.baseUrl}\r\n                                    onChange={(e) => props.handleChange(e.target)}\r\n                                >\r\n                                </input>\r\n                            </div>\r\n                            <div className=\"grid grid-col mb-2\">\r\n                                <label htmlFor=\"ownerId\">Owner</label>\r\n                                <select id=\"ownerId\"\r\n                                    className=\"p-1 dark:text-black bg-gray-400\"\r\n                                    value={props.values.ownerId}\r\n                                    onChange={(e) => props.handleChange(e.target)}\r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    {\r\n                                        props.owners.map(owner => {\r\n                                            return (\r\n                                                <option\r\n                                                    value={owner.id}\r\n                                                    key={owner.id}>\r\n                                                    {owner.name}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"grid grid-col mb-2\">\r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <textarea id=\"description\"\r\n                                    className=\"p-1 dark:text-black bg-gray-400\"\r\n                                    value={props.values.description}\r\n                                    onChange={(e) => props.handleChange(e.target)}\r\n                                >\r\n                                </textarea>\r\n                            </div>\r\n                            <div className=\"flex justify-center\">\r\n                                <button onClick={(e) => { props.putApiData(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">Add API Base</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <Loader pageStatus={props.pageStatus} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ApisEdit;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IApi } from \"../../dtos/IApi\";\r\nimport { IApiEndpoint } from \"../../dtos/IApiEndpoint\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\n\r\n\r\nconst ApisIndex = () => {\r\n    const [apis, setApis] = useState([] as IApi[])\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n    const appContext = useContext(AppContext)\r\n\r\n    const initialSelectedApi: IApi | null = {\r\n        id: \"\",\r\n        ownerId: \"\",\r\n        baseUrl: \"\",\r\n        name: \"\"\r\n    }\r\n\r\n    const [selectedApi, setSelectedApi] = useState(initialSelectedApi);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<IApi>('/v1/ApiBaseInformation');\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n            setApis(result.data)\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\r\n        }\r\n    }\r\n\r\n    const removeApi = async (apiId: string) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        let result = await BaseService.delete<IApi>('/v1/ApiBaseInformation', apiId, appContext.jwt ?? \"\");\r\n        if (result.ok) {\r\n            apis.splice(\r\n                apis.findIndex((a) => a.id === apiId),\r\n                1\r\n            );\r\n            setSelectedApi(initialSelectedApi);\r\n        }\r\n\r\n        setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n    }\r\n\r\n    const removeEndpoint = async (endpointId: string, apiId: string) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        let result = await BaseService.delete<IApiEndpoint>('/v1/ApiEndpoints', endpointId, appContext.jwt ?? \"\");\r\n        if (result.ok) {\r\n            apis.forEach(api => {\r\n                if (api.id === apiId) {\r\n                    api.apiEndpoints?.forEach(endpoint => {\r\n                        if (endpoint.id === endpointId) {\r\n                            api.apiEndpoints?.splice(\r\n                                api.apiEndpoints.findIndex(e => e.id === endpointId),\r\n                                1\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            setSelectedApi(initialSelectedApi);\r\n        }\r\n\r\n        setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const RowDisplay = (props: { api: IApi }) => {\r\n        return (\r\n            <>\r\n                <div\r\n                    className=\"group block w-96 sm:w-120 p-2 border-black dark:border-white dark:text-white border-2 m-2 text-center dark:hover:bg-black hover:bg-gray-100 rounded-md\"\r\n                    key={props.api.id}\r\n                    onClick={(e) => appContext.jwt !== null ? selectedApi.id !== props.api.id ? setSelectedApi(props.api) : setSelectedApi(initialSelectedApi) : {}}>\r\n                    {appContext.jwt !== null\r\n                        ?\r\n                        <>\r\n                            <Link\r\n                                className=\"float-left\"\r\n                                to={`/apis/edit/${props.api.id}`}>\r\n                                📝\r\n                            </Link>\r\n                            {\r\n                                props.api.apiEndpoints === undefined || props.api.apiEndpoints.length < 1\r\n                                    ?\r\n                                    <button className=\"float-right\"\r\n                                        onClick={() => removeApi(props.api.id)}>\r\n                                        ✖\r\n                                    </button>\r\n                                    :\r\n                                    <></>\r\n                            }\r\n                        </>\r\n                        :\r\n                        <></>\r\n                    }\r\n                    <div>\r\n                        <div className=\"text-lg font-semibold group-hover:underline\">{props.api.name}</div>\r\n                        <div className=\"flex flex-nowrap justify-between text-xs\">\r\n                            <div>\r\n                                <a className=\"hover:underline\" href={props.api.baseUrl} target=\"_blank\" rel=\"noreferrer noopener\">{props.api.baseUrl}</a>\r\n                            </div>\r\n                            <div>\r\n                                {props.api.owner}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"italic py-2\">\r\n                        {props.api.description}\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"text-left py-2 space-y-2\">\r\n                        {\r\n                            props.api.apiEndpoints?.map(endpoint => (\r\n                                <div key={endpoint.id}>\r\n                                    <div className=\"inline-flex w-full \">\r\n                                        <input className=\"w-full p-2 group-hover:bg-gray-300 dark:group-hover:bg-gray-700 dark:bg-gray-500 bg-gray-200\" disabled defaultValue={props.api.baseUrl + endpoint.endpointUrl} />\r\n                                        {\r\n                                            appContext.jwt !== null\r\n                                                ?\r\n                                                <button\r\n                                                    onClick={() => removeEndpoint(endpoint.id, endpoint.apiBaseInformationId)}\r\n                                                    className=\"w-auto p-2 group-hover:bg-red-300 dark:group-hover:bg-red-700 dark:bg-gray-400 bg-gray-100\">\r\n                                                    X\r\n                                                </button>\r\n                                                :\r\n                                                <></>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-wrap sm:flex-nowrap\">\r\n                <div className=\"sticky top-0 opacity-90 w-full sm:w-auto\">\r\n                    {\r\n                        appContext.jwt !== null\r\n                            ?\r\n                            <div className=\"flex-row pt-2 px-4 w-full sm:w-44 border-black bg-gradient-to-b from-pink-200 to-white dark:from-blue-900 dark:to-gray-800 space-y-2 sticky top-0\">\r\n                                <Link\r\n                                    className=\"block p-2 bg-green-600 whitespace-nowrap w-full text-center\"\r\n                                    to=\"/apis/create\">\r\n                                    Add new Base\r\n                                </Link>\r\n                                {\r\n                                    selectedApi.id !== \"\"\r\n                                        ?\r\n                                        <Link\r\n                                            className=\"block p-2 bg-green-600 w-full sm:w-auto text-center\"\r\n                                            to={`/apis/${selectedApi.id}/endpoint/create`}>\r\n                                            Add Endpoint to {selectedApi.name}\r\n                                        </Link>\r\n                                        :\r\n                                        <div className=\"dark:text-white text-center\">\r\n                                            Click on API Card to add new Endpoint😎\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                            :\r\n                            <></>\r\n                    }\r\n                </div>\r\n                <div className=\"flex-row\">\r\n                    <div className=\"flex flex-wrap justify-center\">\r\n                        {\r\n                            apis.map(api =>\r\n                                <RowDisplay api={api} key={api.id} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <Loader pageStatus={pageStatus} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ApisIndex;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\nexport interface ICreateEndpointValues {\r\n    endpointUrl: string;\r\n    apiBaseInformationId: string;\r\n}\r\n\r\nconst initialFormValues: ICreateEndpointValues = {\r\n    endpointUrl: \"\",\r\n    apiBaseInformationId: \"\"\r\n}\r\n\r\nexport interface ICreateEndpointProps {\r\n    values: ICreateEndpointValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    postEndpointUrl: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\nconst CreateEndpoint = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Ok, statusCode: 0 });\r\n    const appState = useContext(AppContext);\r\n\r\n    let { id } = useParams() as IRouteId;\r\n\r\n    useEffect(() => {\r\n        setFormValues({ ...formValues, apiBaseInformationId: id });\r\n    }, [])\r\n\r\n    const postEndpointUrl = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        if (!appState.jwt) {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: -1 });\r\n            return;\r\n        };\r\n\r\n        let result = await BaseService.post<ICreateEndpointValues>(\"/v1/ApiEndpoints\", formValues, appState.jwt);\r\n\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"endpointUrl\":\r\n                setFormValues({ ...formValues, endpointUrl: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {appState.jwt !== null && pageStatus.statusCode !== 201\r\n                ?\r\n                <CreateEndpointFormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    postEndpointUrl={postEndpointUrl}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/apis\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst CreateEndpointFormView = (props: ICreateEndpointProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"endpointUrl\">Endpoint URL</label>\r\n                        <input id=\"endpointUrl\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.endpointUrl}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.postEndpointUrl(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">Add API Base</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateEndpoint;\r\n","const HomeIndex = () => {\r\n    return (\r\n        <div className=\"dark:text-white p-2\">\r\n            Welcome to APIs Home page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeIndex;\r\n","import { IRegisterValues } from './../containers/identity/Register';\r\nimport Axios, { AxiosError } from \"axios\";\r\nimport { LoginUrl } from \"../configuration\";\r\nimport { ILoginValues } from \"../containers/identity/Login\";\r\nimport { IFetchResponse } from \"../types/IFetchResponse\";\r\n\r\nexport abstract class AccountService {\r\n\r\n    protected static axios = Axios.create({\r\n        baseURL: LoginUrl,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    static login = async<TEntity>(loginData: ILoginValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Login', JSON.stringify(loginData));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    static register = async <TEntity>(registerData: IRegisterValues): Promise<IFetchResponse<TEntity[]>> => {\r\n        try {\r\n            let response = await AccountService.axios.post('Register', JSON.stringify(registerData));\r\n            return {\r\n                ok: response.status <= 299,\r\n                statusCode: response.status,\r\n                data: response.data\r\n            }\r\n        } catch (error) {\r\n            let axError = error as AxiosError;\r\n            return {\r\n                ok: false,\r\n                statusCode: axError.response?.status ?? 500,\r\n                messages: axError.message !== null ? [] : axError.message,\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { useContext, useState } from \"react\"\r\nimport { Redirect } from \"react-router\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nexport interface ILoginValues {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\nconst initialFormValues: ILoginValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n};\r\n\r\nexport interface ILoginProps {\r\n    values: ILoginValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.login({\r\n            email: formValues.email,\r\n            password: formValues.password\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.fullName)\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        if (target.id === \"email\") {\r\n            setFormValues({ ...formValues, email: target.value })\r\n        }\r\n        if (target.id === \"password\") {\r\n            setFormValues({ ...formValues, password: target.value })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst FormView = (props: ILoginProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input id=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.email}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input id=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.password}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.toggleAuthStatus(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">Login</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { AccountService } from \"../../services/account-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IJwtResponse } from \"../../types/IJwtResponse\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nexport interface IRegisterValues {\r\n    email?: string;\r\n    password?: string;\r\n    fullName?: string;\r\n}\r\n\r\nconst initialFormValues: IRegisterValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    fullName: \"\",\r\n}\r\n\r\nexport interface IRegisterProps {\r\n    values: IRegisterValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    toggleAuthStatus: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const [pageStatus, setPageStatus] = useState({\r\n        pageStatus: EPageStatus.Ok, statusCode: 0\r\n    });\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const toggleAuthStatus = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n        let result = await AccountService.register({\r\n            email: formValues.email,\r\n            password: formValues.password,\r\n            fullName: formValues.fullName,\r\n        });\r\n\r\n        if (result.ok && result.data) {\r\n            const jwtResponse = result.data as unknown as IJwtResponse;\r\n            appState.setAuthInfo(jwtResponse.token, jwtResponse.fullName)\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n        }\r\n        setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"email\":\r\n                setFormValues({ ...formValues, email: target.value })\r\n                break;\r\n            case \"password\":\r\n                setFormValues({ ...formValues, password: target.value })\r\n                break;\r\n            case \"fullName\":\r\n                setFormValues({ ...formValues, fullName: target.value })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt === null\r\n                ?\r\n                <FormView\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    toggleAuthStatus={toggleAuthStatus}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/\" />\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst FormView = (props: IRegisterProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input id=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.email}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input id=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.password}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"fullName\">Full Name</label>\r\n                        <input id=\"fullName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.fullName}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.toggleAuthStatus(e.target); e.preventDefault() }} className=\"p-2 bg-green-800 text-white\">Login</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nexport interface ICreateOwnerFormValues {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\nconst initialFormValues: ICreateOwnerFormValues = {\r\n    name: \"\",\r\n    description: \"\",\r\n}\r\n\r\nexport interface IOwnersCreateFormProps {\r\n    values: ICreateOwnerFormValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    postOwnerForm: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\nconst OwnersCreate = () => {\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Ok, statusCode: 0 });\r\n    const appState = useContext(AppContext);\r\n\r\n    const postOwnerForm = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        if (!appState.jwt) {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: -1 });\r\n            return;\r\n        };\r\n\r\n        const result = await BaseService.post<ICreateOwnerFormValues>(\"/v1/Owners\", formValues, appState.jwt);\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n            console.log(pageStatus);\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"ownerName\":\r\n                setFormValues({ ...formValues, name: target.value })\r\n                return;\r\n            case \"ownerDesc\":\r\n                setFormValues({ ...formValues, description: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt !== null && pageStatus.statusCode !== 201\r\n                ?\r\n                <OwnerCreateFormVIew\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    postOwnerForm={postOwnerForm}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/owners\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst OwnerCreateFormVIew = (props: IOwnersCreateFormProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"ownerName\">Owner name</label>\r\n                        <input id=\"ownerName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.name}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"ownerDesc\">Owner description</label>\r\n                        <input id=\"ownerDesc\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.description}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.postOwnerForm(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">\r\n                            Add Owner\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OwnersCreate;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IOwner } from \"../../dtos/IOwner\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\nimport { IRouteId } from \"../../types/IRouteId\";\r\n\r\nexport interface IEditOwnerFormValues {\r\n    name: string;\r\n    description?: string;\r\n}\r\n\r\nconst initialFormValues: IEditOwnerFormValues = {\r\n    name: \"\",\r\n    description: \"\",\r\n}\r\n\r\nexport interface IOwnersCreateFormProps {\r\n    values: IEditOwnerFormValues;\r\n    handleChange: (target: HTMLInputElement) => void;\r\n    putOwnerData: (target: EventTarget) => void;\r\n    pageStatus: IPageStatus;\r\n}\r\n\r\nconst OwnersEdit = () => {\r\n    let { id } = useParams() as IRouteId;\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus);\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n\r\n    const appState = useContext(AppContext);\r\n\r\n    const loadData = async () => {\r\n        const ownerResult = await BaseService.get<IOwner>('/v1/Owners', id, appState.jwt ?? \"\");\r\n        if (ownerResult.ok && ownerResult.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 })\r\n            setFormValues(ownerResult.data)\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: ownerResult.statusCode })\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const putOwnerData = async (e: EventTarget) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 })\r\n\r\n        let result = await BaseService.put<IEditOwnerFormValues>(\"/v1/Owners\", formValues, id, appState.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode })\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\r\n        }\r\n    }\r\n\r\n    const handleChange = (target: HTMLInputElement) => {\r\n        switch (target.id) {\r\n            case \"ownerName\":\r\n                setFormValues({ ...formValues, name: target.value })\r\n                return;\r\n            case \"ownerDesc\":\r\n                setFormValues({ ...formValues, description: target.value })\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {appState.jwt !== null && pageStatus.statusCode !== 204\r\n                ?\r\n                <OwnerCreateFormVIew\r\n                    values={formValues}\r\n                    handleChange={handleChange}\r\n                    putOwnerData={putOwnerData}\r\n                    pageStatus={pageStatus} />\r\n                :\r\n                <Redirect to=\"/owners\" />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst OwnerCreateFormVIew = (props: IOwnersCreateFormProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center p-2\">\r\n                <form className=\"p-2 w-96 sm:w-120 border-2 dark:border-white border-black dark:text-white\">\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"ownerName\">Owner name</label>\r\n                        <input id=\"ownerName\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.name}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"grid grid-col mb-2\">\r\n                        <label htmlFor=\"ownerDesc\">Owner description</label>\r\n                        <input id=\"ownerDesc\"\r\n                            type=\"text\"\r\n                            className=\"p-1 dark:text-black bg-gray-400\"\r\n                            value={props.values.description}\r\n                            onChange={(e) => props.handleChange(e.target)}\r\n                        >\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"flex justify-center\">\r\n                        <button onClick={(e) => { props.putOwnerData(e.target); e.preventDefault() }} className=\"p-2 bg-green-800\">\r\n                            Add Owner\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Loader pageStatus={props.pageStatus} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OwnersEdit;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IOwner } from \"../../dtos/IOwner\";\r\nimport { BaseService } from \"../../services/base-service\";\r\nimport { EPageStatus } from \"../../types/EPageStatus\";\r\nimport { IPageStatus } from \"../../types/IPageStatus\";\r\n\r\nconst OwnersIndex = () => {\r\n    const [owners, setOwners] = useState([] as IOwner[])\r\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 } as IPageStatus)\r\n\r\n    const appContext = useContext(AppContext);\r\n\r\n    const initialSelectedOwner: IOwner | null = {\r\n        id: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n        apis: []\r\n    }\r\n\r\n    const [selectedOwner, setSelectedOwner] = useState(initialSelectedOwner);\r\n\r\n    const loadData = async () => {\r\n        let result = await BaseService.getAll<IOwner>('/v1/Owners');\r\n        if (result.ok && result.data) {\r\n            setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: 0 });\r\n            setOwners(result.data);\r\n        } else {\r\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\r\n            console.log(pageStatus);\r\n        }\r\n    }\r\n\r\n    const removeOwner = async (ownerId: string) => {\r\n        setPageStatus({ pageStatus: EPageStatus.Loading, statusCode: -1 });\r\n\r\n        let result = await BaseService.delete<IOwner>('/v1/Owners', ownerId, appContext.jwt ?? \"\");\r\n\r\n        if (result.ok) {\r\n            owners.splice(\r\n                owners.findIndex((o) => o.id === ownerId),\r\n                1\r\n            );\r\n            setSelectedOwner(initialSelectedOwner);\r\n        }\r\n\r\n        setPageStatus({ pageStatus: EPageStatus.Ok, statusCode: result.statusCode });\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const CardDisplay = (props: { owner: IOwner }) => {\r\n        return (\r\n            <>\r\n                <div\r\n                    className=\"group block w-96 sm:w-120 p-2 border-black dark:border-white dark:text-white border-2 m-2 text-center dark:hover:bg-black hover:bg-gray-100 rounded-md\"\r\n                    key={props.owner.id}\r\n                    onClick={(e) => appContext.jwt !== null ? selectedOwner.id !== props.owner.id ? setSelectedOwner(props.owner) : setSelectedOwner(initialSelectedOwner) : {}}>\r\n                    {appContext.jwt !== null\r\n                        ?\r\n                        <>\r\n                            <Link\r\n                                className=\"float-left\"\r\n                                to={`/owners/edit/${props.owner.id}`}>\r\n                                📝\r\n                            </Link>\r\n                            {\r\n                                props.owner.apis === undefined || props.owner.apis.length < 1\r\n                                    ?\r\n                                    <button className=\"float-right\"\r\n                                        onClick={() => removeOwner(props.owner.id)}>\r\n                                        ✖\r\n                                    </button>\r\n                                    :\r\n                                    <></>\r\n                            }\r\n                        </>\r\n                        :\r\n                        <></>\r\n                    }\r\n                    <div>\r\n                        <div className=\"text-lg font-semibold group-hover:underline\">{props.owner.name}</div>\r\n                        <div className=\"flex flex-nowrap justify-between text-xs\">\r\n                            <div>\r\n                            </div>\r\n                            <div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"italic py-2\">\r\n                        {props.owner.description}\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"text-left py-2 space-y-2\">\r\n                        {\r\n                            props.owner.apis?.map(api => (\r\n                                <div key={api.id}>\r\n                                    <div className=\"inline-flex w-full \">\r\n                                        <input className=\"w-full p-2 group-hover:bg-gray-300 dark:group-hover:bg-gray-700 dark:bg-gray-500 bg-gray-200\" disabled defaultValue={api.baseUrl} />\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-wrap sm:flex-nowrap\">\r\n                <div className=\"sticky top-0 opacity-90 w-full sm:w-auto\">\r\n                    {\r\n                        appContext.jwt !== null\r\n                            ?\r\n                            <div className=\"flex-row pt-2 px-4 w-full sm:w-44 border-black bg-gradient-to-b from-pink-200 to-white dark:from-blue-900 dark:to-gray-800 space-y-2 sticky top-0\">\r\n                                <Link\r\n                                    className=\"block p-2 bg-green-600 whitespace-nowrap w-full text-center\"\r\n                                    to=\"/owners/create\">\r\n                                    Add new Owner\r\n                                </Link>\r\n                            </div>\r\n                            :\r\n                            <></>\r\n                    }\r\n                </div>\r\n                <div className=\"flex-row\">\r\n                    <div className=\"flex flex-wrap justify-center\">\r\n                        {\r\n                            owners.map(owner =>\r\n                                <CardDisplay owner={owner} key={owner.id} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <Loader pageStatus={pageStatus} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OwnersIndex;\r\n","const Page404 = () => {\r\n    return (\r\n        <div>\r\n            404\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;\r\n","import React, { useState } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport ApisCreate from './containers/apis/ApisCreate';\r\nimport ApisEdit from './containers/apis/ApisEdit';\r\nimport ApisIndex from './containers/apis/ApisIndex';\r\nimport CreateEndpoint from './containers/endpoints/CreateEndpoint';\r\nimport HomeIndex from './containers/home/HomeIndex';\r\nimport LoginForm from './containers/identity/Login';\r\nimport RegisterForm from './containers/identity/Register';\r\nimport OwnersCreate from './containers/owners/OwnersCreate';\r\nimport OwnersEdit from './containers/owners/OwnersEdit';\r\nimport OwnersIndex from './containers/owners/OwnersIndex';\r\nimport Page404 from './containers/Page404';\r\nimport { AppContextProvider, initialAppState } from './context/AppContext';\r\n\r\nfunction App() {\r\n    const setAuthInfo = (jwt: string | null, fullName: string): void => {\r\n        setAppState({ ...appState, jwt, fullName });\r\n    }\r\n\r\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo })\r\n\r\n    return (\r\n        <AppContextProvider value={appState}>\r\n            <div className=\"dark:bg-gray-800 min-h-screen\">\r\n                <Header />\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={HomeIndex} />\r\n\r\n                        <Route exact path=\"/identity/login\" component={LoginForm} />\r\n                        <Route exact path=\"/identity/register\" component={RegisterForm} />\r\n\r\n                        <Route exact path=\"/apis/edit/:id\" component={ApisEdit} />\r\n                        <Route exact path=\"/apis/create\" component={ApisCreate} />\r\n                        <Route exact path=\"/apis\" component={ApisIndex} />\r\n\r\n                        <Route exact path=\"/owners/edit/:id\" component={OwnersEdit} />\r\n                        <Route exact path=\"/owners/create\" component={OwnersCreate} />f\r\n                        <Route exact path=\"/owners\" component={OwnersIndex} />\r\n\r\n                        <Route exact path=\"/apis/:id/endpoint/create\" component={CreateEndpoint} />\r\n\r\n                        <Route component={Page404} />\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n        </AppContextProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport 'jquery';\r\nimport 'popper.js';\r\n\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './assets/site.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}